C51 COMPILER V7.10   PWM                                                                   05/14/2014 22:39:12 PAGE 1   


C51 COMPILER V7.10, COMPILATION OF MODULE PWM
OBJECT MODULE PLACED IN PWM.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE PWM.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          //working with 12c5a60s2
   2          #include <reg52.h>
   3          #include <intrins.h>
   4          #include <stdlib.h>
   5          #define   uchar unsigned char   /*宏定义*/
   6          #define   uint   unsigned int
   7          //extern void Delay1us(unsigned char );
   8          
   9          sbit SDA=P1^6;              /*模拟I2C数据传送位*/
  10          sbit SCL=P1^7;              /*模拟I2C时钟控制位*/
  11          bit ack;            /*应答标志位*/
  12          
  13          unsigned char timer1,duty,switching, timer2, timer2_goal, timer2_4switch,sending_data; 
  14          //unsigned char send_buffer;  //rs232 sending buffer
  15          
  16          uchar buffer_pointer;
  17          unsigned char ReData,SenData;
  18          
  19          uchar I2C_mode_codes[4]={0,6,12,15};
  20          uchar current_mode;
  21          uchar duty4modes[4]={0,3,3,3};
  22          
  23          uint time_out232;
  24          uchar received232;
  25          uchar have232connected;
  26          
  27          //sbit PWM=P1^1;
  28          sbit GoHaze= P0^6;
  29          sbit GoClear= P0^7;
  30          sbit PWM1 = P0^1;
  31          sbit PWM2 = P0^2;
  32          
  33          sfr P0M0    = 0x94;
  34          sfr P0M1    = 0x93;
  35          sfr P1M0    = 0x91;
  36          sfr P1M1    = 0x92;
  37          
  38          sfr T2MOD = 0xc9;
  39          
  40          /////////////////////////// start I2C ////////////////////////
  41          
  42          void Delay1us(uchar time_length)
  43          {
  44   1      uchar i;
  45   1      for(i=0;i<time_length;i++);
  46   1      }
  47          
  48          /*******************************************************************
  49                                起动总线函数               
  50          函数原型: void   Start_I2c();  
  51          功能:      启动I2C总线,即发送I2C起始条件.  
  52          ********************************************************************/
  53          void Start_I2c()
  54          {
  55   1         SDA=1;     /*发送起始条件的数据信号*/
C51 COMPILER V7.10   PWM                                                                   05/14/2014 22:39:12 PAGE 2   

  56   1         Delay1us(1);
  57   1         SCL=1;
  58   1         Delay1us(5);      /*起始条件建立时间大于4.7us,延时*/
  59   1         
  60   1         SDA=0;     /*发送起始信号*/
  61   1         Delay1us(5);      /* 起始条件锁定时间大于4μs*/
  62   1              
  63   1         SCL=0;     /*钳住I2C总线，准备发送或接收数据 */
  64   1         Delay1us(2);
  65   1      }
  66          
  67          /*******************************************************************
  68                                 结束总线函数               
  69          函数原型: void   Stop_I2c();  
  70          功能:      结束I2C总线,即发送I2C结束条件.  
  71          ********************************************************************/
  72          void Stop_I2c()
  73          {
  74   1         SDA=0;    /*发送结束条件的数据信号*/
  75   1         Delay1us(1);     /*发送结束条件的时钟信号*/
  76   1         SCL=1;    /*结束条件建立时间大于4us*/
  77   1         Delay1us(5);
  78   1        
  79   1         SDA=1;    /*发送I2C总线结束信号*/
  80   1         Delay1us(4);
  81   1      
  82   1      }
  83          /*******************************************************************
  84                            字节数据发送函数               
  85          函数原型: void   SendByte(uchar c);
  86          功能:      将数据c发送出去,可以是地址,也可以是数据,发完后等待应答,并对
  87                     此状态位进行操作.(不应答或非应答都使ack=0)     
  88                   发送数据正常，ack=1; ack=0表示被控器无应答或损坏。
  89          ********************************************************************/
  90          void   SendByte(uchar c)
  91          {
  92   1      uchar BitCnt;
  93   1      
  94   1      for(BitCnt=0;BitCnt<8;BitCnt++)   /*要传送的数据长度为8位*/
  95   1           {
  96   2            if((c<<BitCnt)&0x80)SDA=1;    /*判断发送位*/
  97   2              else   SDA=0;               
  98   2            Delay1us(1);
  99   2      
 100   2            SCL=1;                /*置时钟线为高，通知被控器开始接收数据位*/      
 101   2            Delay1us(5);              /*保证时钟高电平周期大于4μs*/
 102   2                  
 103   2            SCL=0;
 104   2           }
 105   1         
 106   1           Delay1us(2);
 107   1           SDA=1;                 /*8位发送完后释放数据线，准备接收应答位*/
 108   1           Delay1us(2);   
 109   1           SCL=1;
 110   1           Delay1us(3);
 111   1           if(SDA==1)ack=0;     
 112   1              else ack=1;         /*判断是否接收到应答信号*/
 113   1           SCL=0;
 114   1           Delay1us(20);
 115   1      }
 116          
 117          /*******************************************************************
C51 COMPILER V7.10   PWM                                                                   05/14/2014 22:39:12 PAGE 3   

 118                               向有子地址器件发送多字节数据函数               
 119          函数原型: bit   ISendStr(uchar sla,uchar suba,ucahr *s,uchar no);  
 120          功能:      从启动总线到发送地址，子地址,数据，结束总线的全过程,从器件
 121                     地址sla，子地址suba，发送内容是s指向的内容，发送no个字节。
 122                     如果返回1表示操作成功，否则操作有误。
 123          注意：     使用前必须已结束总线。
 124          
 125          Removed the address part, and just changed it to single byte sending
 126          ********************************************************************/
 127          bit ISendStr(uchar s)
 128          {
 129   1      
 130   1          Start_I2c();                /*启动总线*/
 131   1            SendByte(0xe0);             /*发送数据*/
 132   1            //if(ack==0)return(0);
 133   1            SendByte(s);             /*发送数据*/
 134   1            //if(ack==0)return(0);
 135   1      // Need uncomment the ack bit when connected
 136   1      
 137   1          Stop_I2c();                 /*结束总线*/
 138   1      
 139   1          return(1);
 140   1      }
 141          ////////////////////////// end for I2C //////////////////////
 142          
 143          void system_Ini()
 144          {
 145   1      
 146   1              duty=5;   // Init the backlight as off, PWM positive duty in 20%
 147   1              timer1=0; //timer for PWM
 148   1              switching=0; //status of in process of switching
 149   1              timer2=0; //timer for switching black frame
 150   1              timer2_goal = 0; //timer2 length setting
 151   1              sending_data =0; // if send data thru rs232
 152   1              buffer_pointer = 0; //if data received from rs232
 153   1                      
 154   1              timer2_4switch = 200; //how many PWM piorids for the black frame
 155   1              //send_buffer=(uchar*)malloc(8);
 156   1              time_out232=0;          //time out for no 232 data
 157   1              received232=0;          //get data from 232 input
 158   1              have232connected=0; //init assuming no 232                                      
 159   1      
 160   1              //duty_after_switch = duty; //duty set when button pressed for the duty% after black frame
 161   1              
 162   1              P0M0 = 0;
 163   1              P0M1 = 0;
 164   1              P1M0 = 0;
 165   1              P1M1 = 0;
 166   1      
 167   1              //Increase = 1;
 168   1              //Decrease = 1;
 169   1                      
 170   1      }
 171          
 172          void rs232init()
 173          {
 174   1                  /*TMOD|= 0x03;
 175   1              //PWM  
 176   1              TH0 = 0xfe; //11.0592
 177   1              TL0 = 0xe3;
 178   1              TR0  = 1; 
 179   1          IE =0x8A;
C51 COMPILER V7.10   PWM                                                                   05/14/2014 22:39:12 PAGE 4   

 180   1              //////////////////
 181   1              
 182   1      
 183   1              RCAP2H=0xfe;
 184   1              RCAP2L=0xe3;
 185   1              TH2=RCAP2H;
 186   1              TL2=RCAP2L;
 187   1              T2CON=0x80;
 188   1              ET2=1;
 189   1              TR2=1;
 190   1              EA=1;   */
 191   1              
 192   1                      
 193   1                      SCON = 0x50;      //REN=1允许串行接受状态，串口工作模式1                   
 194   1                  TMOD|= 0x20;      //定时器工作方式2                    
 195   1                      PCON|= 0x80;                                                          
 196   1                      TH1  = 0xFD;     //baud*2  /* reload value 19200、数据位8、停止位1。效验位无 (11.0592) 
 197   1                      //TH1 = 0xF3;                                   // //baud*2  /*  波特率4800、数据位8、停止位1。效验位无 (12M)
 198   1              TL1 = 0xF3;    
 199   1                      
 200   1                      /*//T2CON=0x34;
 201   1                      //T2MOD=0x0;
 202   1                      RCAP2H=0xfd;
 203   1                      RCAP2L=0x33;
 204   1                      TH2=RCAP2H;
 205   1                      TL2=RCAP2L;
 206   1                      //TH2 = 0xfd;
 207   1                      //TL2 = 0xf3;
 208   1                      ET2=1;
 209   1                      */
 210   1      
 211   1                      TMOD|=0x01;               //T0 freq setup.
 212   1                      TH0=0xfe;
 213   1                      TL0=0xfd;
 214   1                      ET0=1;
 215   1      
 216   1                      //SCON=0x50;
 217   1                      ES   = 1;        //开串口中断                  
 218   1                      EA   = 1;        // 开总中断
 219   1                      PS = 8; //serial port priority =1
 220   1                      
 221   1                      TR0=1;
 222   1                              
 223   1                      TR1  = 1;                                                             
 224   1       
 225   1                      //BEEP=1;
 226   1                 // IE = 0x0;
 227   1      }
 228          
 229          void send232(uchar send_number)
 230          {
 231   1                      if(buffer_pointer<32) buffer_pointer++;
 232   1                      //*(send_buffer + buffer_pointer) = send_number;        //add the number to buffer
 233   1      
 234   1                      SenData = send_number;
 235   1      }
 236          
 237          void buffer_send()
 238          {
 239   1                if ((buffer_pointer>=1) && (sending_data ==0) &&(TI==0) )
 240   1                {
 241   2                   //SBUF= *( send_buffer + buffer_pointer);               //SUBF接受/发送缓冲器
C51 COMPILER V7.10   PWM                                                                   05/14/2014 22:39:12 PAGE 5   

 242   2                       SBUF = SenData;
 243   2                       sending_data=1;
 244   2                       buffer_pointer--;
 245   2                      /*while(TI==0);
 246   2               TI=0;
 247   2                       buffer_pointer--; */
 248   2                }
 249   1      
 250   1              if( (sending_data==1)&&(TI!=0)) 
 251   1                      {sending_data=0; TI=0;}  //check if data sent, init the status
 252   1      }
 253          
 254          void switch2mode(uchar to_mode)
 255          {
 256   1                              switching = 1;
 257   1                              timer2 = 0;
 258   1                              timer2_goal = timer2_4switch;
 259   1                              
 260   1                              duty=10;
 261   1                              ISendStr(I2C_mode_codes[to_mode]);
 262   1                              current_mode=to_mode;
 263   1                              send232(to_mode);
 264   1      }
 265          
 266           main()
 267          {
 268   1        //int i;
 269   1      
 270   1        system_Ini();
 271   1      
 272   1        //for(i=0;i<10000;i++);
 273   1      
 274   1        rs232init();
 275   1      
 276   1        switch2mode(3);  //to all clear
 277   1      
 278   1        while(1)
 279   1        { 
 280   2              // PWM waveform generate
 281   2              //timer1++;
 282   2              
 283   2              if(timer1>9) 
 284   2                      {
 285   3                      timer1=0;
 286   3                      timer2++;
 287   3                      }
 288   2          if(timer1>=duty) 
 289   2                      { 
 290   3                      PWM1 = 0; 
 291   3                      PWM2 = 0; 
 292   3                      }
 293   2          else { PWM1=1; PWM2=1; }
 294   2      
 295   2              // Switching control
 296   2              if (switching == 1)
 297   2                      {
 298   3                      if (timer2 > timer2_goal)
 299   3                              {
 300   4                              switching = 0; 
 301   4                              duty=duty4modes[current_mode];
 302   4                              }
 303   3                      }
C51 COMPILER V7.10   PWM                                                                   05/14/2014 22:39:12 PAGE 6   

 304   2                      else //detecting switch button
 305   2                      {
 306   3                      if (GoHaze==0)
 307   3                              {
 308   4                              switch2mode(0); //mode 0 is all haze
 309   4                              }
 310   3                      else if (GoClear==0)
 311   3                              {
 312   4                              switch2mode(3); //mode 3 is all clear
 313   4                              }
 314   3      
 315   3                      }
 316   2                      
 317   2              buffer_send(); //send the data in rs232 buffer out.     
 318   2              if ((time_out232 > 1000 )&&(have232connected==1)){
 319   3                       switch2mode(3); //if 232 no data time out switch to clear
 320   3                       have232connected =0;
 321   3                       }
 322   2         }
 323   1      
 324   1       }
 325          
 326          /*************************************
 327           [ t1 (0.5ms)中断] 中断中做 PWM 输出
 328            ------------1000/(0.02ms*250)=200Hz
 329          *************************************/
 330          void T1zd(void) interrupt 1  using 0  //3 为定时器1的中断号  1 定时器0的中断号 0 外部中断1 2 外部中断2  4 
             -串口中断        5 is T2
 331          {
 332   1              //TF2=0;          // T2 timer need this TF2=0, no hardware turning
 333   1      
 334   1      //      if( (sending_data==1)&&(buffer_pointer==1)&&(TI!=0)) 
 335   1      //              {sending_data=0; buffer_pointer=0; TI=0;}  //check if data sent, init the status
 336   1              //RCAP2H=0xfe;
 337   1              //RCAP2L=0xe3;
 338   1              //TH2 = 0xfe; //11.0592
 339   1              //TL2 = 0xe3; //It's T2MOD=0, so no need reassign the numbers.
 340   1      
 341   1                      TH0=0xfd;
 342   1                      TL0=0xfd;
 343   1                      //TR0=1;
 344   1              
 345   1               timer1++;
 346   1               if(received232 == 0 ) time_out232++;
 347   1               received232 = 0;
 348   1          
 349   1      }          
 350          
 351          /****************************************************
 352                         串口中断程序
 353          ******************************************************/
 354          void ser_int (void) interrupt 4 using 1
 355          {
 356   1      
 357   1       
 358   1      
 359   1       if(RI == 1)        //RI接受中断标志
 360   1       {
 361   2              RI = 0;             //清除RI接受中断标志
 362   2              ReData = SBUF;  //SUBF接受/发送缓冲器
 363   2              //SenData=ReData;
 364   2              //buffer_pointer=1;
C51 COMPILER V7.10   PWM                                                                   05/14/2014 22:39:12 PAGE 7   

 365   2              send232(ReData);
 366   2              received232=1;   // get 232 data
 367   2              time_out232=0;   //reset time out
 368   2              have232connected=1;    
 369   2       }
 370   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    458    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     23    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
